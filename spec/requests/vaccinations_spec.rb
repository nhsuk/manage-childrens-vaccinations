require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/campaigns/:campain_id/children", type: :request do
  let(:school) do
    School.create!(
      {
        urn: "130877",
        name: "St Andrew's Benn CofE (Voluntary Aided) Primary School",
        address: "Chester Street",
        locality: "",
        town: "Rugby",
        county: "Warwickshire",
        postcode: "CV21 3NX",
        minimum_age: "3",
        maximum_age: "11",
        url: "www.standrewsbennprimary.co.uk/",
        phase: "Primary",
        type: "Local authority maintained schools",
        detailed_type: "Voluntary aided school"
      }
    )
  end

  let(:child) do
    Child.create!(
      {
        first_name: "Gianna",
        last_name: "Becker",
        dob: "2017-06-27T13:33:41.428Z",
        nhs_number: "2490559432",
        gp: "Local GP",
        screening: "Approved for vaccination"
      }
    )
  end

  let(:campaign) do
    Campaign.create!({ location: school, type: "HPV", children: [child] })
  end

  let(:invalid_attributes) do
    skip("Add a hash of attributes invalid for your model")
  end

  describe "GET /index" do
    it "renders a successful response" do
      # Child.create! valid_attributes
      get campaign_vaccinations_url(campaign.id)
      expect(response).to be_successful
    end
  end

  describe "PUT /record" do
    it "redirects to index page" do
      put record_campaign_vaccination_url(campaign.id, child.id)
      expect(response).to(redirect_to(campaign_vaccinations_path(campaign.id)))
    end

    let(:last_updated) { Time.zone.now }
    let(:version_id) { "1" }

    let!(:fhir_server) do
      stub_request(
        :post,
        "https://hapi.fhir.org/baseR4/Immunization"
      ).to_return(status: 200, body: "", headers: {}) do |request|
        # A little playing around shows that the response to the POST from the
        # FHIR server is the created resource with a little additional metadata
        # added as below.
        response_hash = JSON.parse(request.body)
        response_hash["meta"]["lastUpdated"] = last_updated
        response_hash["meta"]["versionId"] = version_id

        {
          headers: {
            "content-type" => "application/fhir+json;charset=utf-8"
          },
          body: response_hash.to_json
        }
      end
    end

    it "sends a request to the FHIR server" do
      put record_campaign_vaccination_url(campaign.id, child.id)
      expect(fhir_server).to have_been_requested
    end

    it "respects the feature flag" do
      allow(Settings.features).to receive(:fhir_server_integration).and_return(
        false
      )

      put record_campaign_vaccination_url(campaign.id, child.id)

      expect(fhir_server).not_to have_been_requested
    end
  end
end
